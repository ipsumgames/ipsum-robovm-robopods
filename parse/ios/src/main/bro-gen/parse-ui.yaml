package: org.robovm.pods.parse.ui
framework: ParseUI
include: 
    - ../../../../../../robovm/cocoatouch/src/main/bro-gen/foundation.yaml
    - ../../../../../../robovm/cocoatouch/src/main/bro-gen/uikit.yaml
    - ../../../../../../robovm/cocoatouch/src/main/bro-gen/coregraphics.yaml
    - ../../../../../bolts/ios/src/main/bro-gen/bolts.yaml
    - parse.yaml
clang_args: ['-x', 'objective-c']
header_root: '/../robopods/META-INF/robovm/ios/libs/'
headers:
    - ParseUI.framework/Headers/ParseUI.h
typedefs:
    
enums:
    PFLogInFields: {}
    PFPurchaseTableViewCellState: {}
    PFSignUpFields: {}
    PFTextFieldSeparatorStyle: {}
        
classes:
    PFCollectionViewCell: # DONE
        methods:
            '-updateFromObject:':
                name: update
                parameters:
                    object:
                        type: T
    PFImageView: # DONE
        methods:
            '-loadInBackground':
                return_type: BFTask<UIImage>
            '-loadInBackground.*':
                name: loadInBackground
                parameters:
                    completion:
                        type: '@Block PFImageDownloadCallback'
                    progressBlock:
                        type: '@Block PFProgressCallback'
    PFLogInView: # DONE
        methods:
            '-initWithFields:':
                name: init
    PFLogInViewController: # DONE
        properties:
            'facebookPermissions':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
    PFProductTableViewController: # DONE
        skip_def_constructor: true
        extends: PFQueryTableViewController<PFProduct>
        methods:
            '-initWithStyle:':
                name: init
    PFPurchaseTableViewCell: {} # DONE
    PFQueryCollectionViewController: # DONE
        skip_def_constructor: true
        properties:
            'objects':
                type: NSArray<T>
            'parseClassName':
                readonly: true
        methods:
            '-init.*':
                name: init
            '-objectsWillLoad':
                name: willLoadObjects
            '-objectsDidLoad:':
                name: didLoadObjects
            '-objectAtIndexPath:':
                name: getObject
                return_type: T
            '-removeObjectAtIndexPath:':
                name: removeObject
            '-removeObjectsAtIndexPaths:':
                name: removeObjects
                parameters:
                    indexes:
                        type: NSArray<NSIndexPath>
            '-loadObjects.*':
                trim_after_first_colon: true
                return_type: BFTask<Void>
            '-queryForCollection':
                name: getQuery
                return_type: PFQuery<T>
            '-collectionView:cellForItemAtIndexPath:object:':
                name: getCellForItem
                return_type: PFCollectionViewCell<T>
                parameters:
                    object:
                        type: T
            '-collectionViewReusableViewForNextPageAction:':
                name: getReusableViewForNextPageAction
            '-collectionView:layout:sizeForItemAtIndexPath:':
                name: getSizeForItem
            '-collectionView:layout:insetForSectionAtIndex:':
                name: getInsetForSection
            '-collectionView:layout:minimumLineSpacingForSectionAtIndex:':
                name: getMinimumLineSpacingForSection
            '-collectionView:layout:minimumInteritemSpacingForSectionAtIndex:':
                name: getMinimumInteritemSpacingForSection
            '-collectionView:layout:referenceSizeForHeaderInSection:':
                name: getReferenceSizeForHeader
            '-collectionView:layout:referenceSizeForFooterInSection:':
                name: getReferenceSizeForFooter
    PFQueryTableViewController: # DONE
        skip_def_constructor: true
        properties:
            'objects':
                type: NSArray<T>
            'parseClassName':
                readonly: true
        methods:
            '-init.*':
                name: init
            '-objectsWillLoad':
                name: willLoadObjects
            '-objectsDidLoad:':
                name: didLoadObjects
            '-objectAtIndexPath:':
                name: getObject
                return_type: T
            '-removeObjectAtIndexPath:.*':
                name: removeObject
            '-removeObjectsAtIndexPaths:.*':
                name: removeObjects
                parameters:
                    indexes:
                        type: NSArray<NSIndexPath>
            '-loadObjects.*':
                trim_after_first_colon: true
                return_type: BFTask<Void>
            '-queryForTable':
                name: getQuery
                return_type: PFQuery<T>
            '-tableView:cellForRowAtIndexPath:object:':
                name: getCellForRow
                parameters:
                    object:
                        type: T
            '-tableView:cellForNextPageAtIndexPath:':
                name: getCellForNextPage
    PFSignUpView: # DONE
        methods:
            '-initWithFields:':
                name: init
    PFSignUpViewController: {} # DONE
    PFTableViewCell: {} # DONE
    PFTextField: # DONE
        methods:
            '-initWithFrame:separatorStyle:':
                name: init
  
protocols:
    PFLogInViewControllerDelegate: # DONE
        methods:
            '-logInViewController:shouldBeginLogInWithUsername:password:':
                name: shouldBeginLogIn
            '-logInViewController:didLogInUser:':
                name: didLogIn
            '-logInViewController:didFailToLogInWithError:':
                name: didFailToLogIn
            '-logInViewControllerDidCancelLogIn:':
                name: didCancelLogIn
    PFSignUpViewControllerDelegate: # DONE
        methods:
            '-signUpViewController:shouldBeginSignUp:':
                name: shouldBeginSignUp
            '-signUpViewController:didSignUpUser:':
                name: didSignUp
                parameters:
                    user:
                        type: PFUser
            '-signUpViewController:didFailToSignUpWithError:':
                name: didFailToSignUp
            '-signUpViewControllerDidCancelSignUp:':
                name: didCancelSignUp

functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?PF.*):
        class: ParseUI
        name: 'Function__#{g[0]}'

values:
    # PFLogInViewController
    PFLogIn(.*Notification):
        class: PFLogInViewController
        name: '#{g[0]}'
        type: NSString
    
    # PFSignUpViewController
    PFSignUp(.*Notification):
        class: PFSignUpViewController
        name: '#{g[0]}'
        type: NSString
        
    PFUI_ASSUME_NONNULL_BEGIN:
        exclude: true
    PFUI_ASSUME_NONNULL_BEGIN:
        exclude: true
    
    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?PF.*):
        class: ParseUI
        name: 'Value__#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?PF.*):
        class: ParseUI
        name: 'Constant__#{g[0]}'
